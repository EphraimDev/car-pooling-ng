{"version":3,"sources":["reducers/auth.js","reducers/index.js","actions/types.js","reducers/alert.js","store/index.js","components/HomePage/HomePage.js","domain/index.js","actions/alert.js","containers/Signin/Signin.js","actions/auth.js","containers/Signup/Signup.js","components/Signin_up/Signin_up.js","containers/Alert/Alert.js","App.js","serviceWorker.js","index.js"],"names":["initialState","token","isAuthenticated","loading","user","rootReducer","combineReducers","auth","state","action","type","payload","localStorage","setItem","removeItem","alert","filter","id","store","createStore","composeWithDevTools","applyMiddleware","thunk","HomePage","domain","setAlert","msg","alertType","timeout","dispatch","uuid","v4","setTimeout","connect","login","email","password","a","data","JSON","stringify","config","headers","axios","post","res","useState","formData","setFormData","onChange","e","target","name","value","to","onSubmit","preventDefault","className","placeholder","register","first_name","last_name","Signin_up","view","setView","onClick","alerts","length","map","key","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.62e2027b.chunk.js","sourcesContent":["import {\r\n  REGISTER_FAIL,\r\n  REGISTER_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  token: null,\r\n  isAuthenticated: null,\r\n  loading: true,\r\n  user: null\r\n};\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case REGISTER_SUCCESS:\r\n    case LOGIN_SUCCESS:\r\n      localStorage.setItem('token', payload);\r\n      return {\r\n        ...state,\r\n        token: payload,\r\n        isAuthenticated: true,\r\n        loading: false\r\n      };\r\n    case REGISTER_FAIL:\r\n    case LOGIN_FAIL:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport auth from './auth';\r\nimport alert from './alert';\r\n\r\nconst rootReducer=combineReducers({auth,alert})\r\n\r\nexport default rootReducer;\r\n","export const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL='LOGIN_FAIL'\r\nexport const REGISTER_FAIL='REGISTER_FAIL';\r\nexport const SET_ALERT = 'SET_ALERT';\r\nexport const REMOVE_ALERT = 'REMOVE_ALERT';","import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\r\n\r\nexport default function(state = [], action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_ALERT:\r\n      return [...state,payload];\r\n      \r\n    case REMOVE_ALERT:\r\n      return state.filter(alert => alert.id !== payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\n\r\nconst HomePage = () => {\r\n  return <div>HomePage</div>;\r\n};\r\n\r\nexport default HomePage;\r\n","export const domain = 'https://car-pooling-ng.herokuapp.com/api/v1';","import uuid from 'uuid';\r\nimport { SET_ALERT, REMOVE_ALERT } from './types';\r\n\r\nexport const setAlert = (msg, alertType, timeout = 5000) => dispatch => {\r\n  const id = uuid.v4();\r\n  dispatch({\r\n    type: SET_ALERT,\r\n    payload: { msg, alertType, id }\r\n  });\r\n  setTimeout(\r\n    () =>\r\n      dispatch({\r\n        type: REMOVE_ALERT,\r\n        payload: id\r\n      }),\r\n    timeout\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { login } from '../../actions/auth';\r\nimport { connect } from 'react-redux';\r\n// import { setAlert } from '../../actions/alert';\r\nconst Signin = ({ login, isAuthenticated }) => {\r\n  const [formData, setFormData] = useState({ email: '', password: '' });\r\n  const { email, password } = formData;\r\n  const onChange = e => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n  const onFormSubmit = e => {\r\n    e.preventDefault();\r\n    login(email, password);\r\n  };\r\n  if (isAuthenticated) {\r\n    return <Redirect to='/' />;\r\n  }\r\n  return (\r\n    <div>\r\n      <form onSubmit={onFormSubmit}>\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          value={email}\r\n          className='form-control no-border mt-3'\r\n          type='text'\r\n          name='email'\r\n          placeholder='Email'\r\n        />\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          value={password}\r\n          className='form-control no-border mt-3'\r\n          type='password'\r\n          name='password'\r\n          placeholder='Password'\r\n        />\r\n        <input className='btn btn-primary mt-3' type='submit' name='submit' />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { login }\r\n)(Signin);\r\n","import {\r\n  REGISTER_FAIL,\r\n  REGISTER_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS\r\n} from './types';\r\nimport axios from 'axios';\r\nimport { domain } from '../domain';\r\nimport { setAlert } from './alert';\r\nexport const register = (\r\n  first_name,\r\n  last_name,\r\n  email,\r\n  password\r\n) => async dispatch => {\r\n  try {\r\n    const data = JSON.stringify({\r\n      first_name,\r\n      last_name,\r\n      email,\r\n      password\r\n    });\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const res = await axios.post(domain + '/auth/signup', data, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data.data.token\r\n    });\r\n    dispatch(setAlert('Registration was successful', 'success'));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n      payload: error\r\n    });\r\n\r\n    dispatch(setAlert('Registration error', 'danger'));\r\n  }\r\n};\r\nexport const login = (email, password) => async dispatch => {\r\n  try {\r\n    const data = JSON.stringify({\r\n      email,\r\n      password\r\n    });\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const res = await axios.post(domain + '/auth/signin', data, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data.data.token\r\n    });\r\n    dispatch(setAlert('Login was successful', 'success'));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: error\r\n    });\r\n    dispatch(setAlert('Login error', 'danger'));\r\n  }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { register } from '../../actions/auth';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst Signup = ({ register, isAuthenticated }) => {\r\n  const [formData, setFormData] = useState({\r\n    first_name: '',\r\n    last_name: '',\r\n    email: '',\r\n    password: ''\r\n  });\r\n  const { first_name, last_name, email, password } = formData;\r\n  const onChange = e => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n  const onFormSubmit = e => {\r\n    e.preventDefault();\r\n    register(first_name, last_name, email, password);\r\n  };\r\n  if (isAuthenticated) {\r\n    return <Redirect to='/' />;\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      {' '}\r\n      <form onSubmit={onFormSubmit}>\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          className='form-control no-border mt-3'\r\n          type='text'\r\n          name='first_name'\r\n          value={first_name}\r\n          placeholder='First Name'\r\n        />\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          className='form-control no-border mt-3'\r\n          type='text'\r\n          name='last_name'\r\n          value={last_name}\r\n          placeholder='Last Name'\r\n        />\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          className='form-control no-border mt-3'\r\n          type='text'\r\n          name='email'\r\n          value={email}\r\n          placeholder='Email'\r\n        />\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          className='form-control no-border mt-3'\r\n          type='password'\r\n          name='password'\r\n          value={password}\r\n          placeholder='Password'\r\n        />\r\n        <input\r\n          className='btn btn-primary mt-3'\r\n          type='submit'\r\n          name='submit'\r\n          id=''\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: state.auth.isAuthenticated\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { register }\r\n)(Signup);\r\n","import React, { useState, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Signin from '../../containers/Signin/Signin';\r\nimport Signup from '../../containers/Signup/Signup';\r\n\r\nconst Signin_up = () => {\r\n  const [view, setView] = useState('signin');\r\n  return (\r\n    <section>\r\n      <div id='cnt' className='row'>\r\n        <div id='img' className='col' />\r\n        <div id='signin' className='col '>\r\n          <Link to='/'>Go back</Link>\r\n          <div className='row mt-5'>\r\n            <div className='col'>\r\n              <button\r\n                className='buttn btn btn-lg'\r\n                onClick={() => {\r\n                  setView('signin');\r\n                }}>\r\n                Signin\r\n              </button>\r\n            </div>\r\n\r\n            <div className='col'>\r\n              <button\r\n                className='buttn btn btn-lg'\r\n                onClick={() => {\r\n                  setView('signup');\r\n                }}>\r\n                Signup\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=''>\r\n            {' '}\r\n            {view === 'signin' ? (\r\n              <Fragment>\r\n                <Signin />\r\n                <br />\r\n                <p>\r\n                  Don't have an account? <Link to='#'>Register</Link>\r\n                </p>\r\n              </Fragment>\r\n            ) : (\r\n              <Fragment>\r\n                <Signup />\r\n                <br />\r\n                <p>\r\n                  Already have an account? <Link to='#'>Sign In</Link>\r\n                </p>\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Signin_up;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Alert = ({ alerts }) => {\r\n  return (\r\n    <div className='container'>\r\n      {alerts !== null &&\r\n        alerts.length > 0 &&\r\n        alerts.map(alert => (\r\n          <div key={alert.id} className={`alert alert-${alert.alertType}`}>\r\n            {alert.msg}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  alerts: state.alert\r\n});\r\nexport default connect(mapStateToProps)(Alert);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport store from './store';\r\n// import Signin from './containers/Signin/Signin';\r\n// import Signup from './containers/Signup/Signup';\r\nimport HomePage from './components/HomePage/HomePage';\r\nimport Signin_up from './components/Signin_up/Signin_up';\r\nimport Alert from './containers/Alert/Alert';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <HashRouter basename='/'>\r\n        <Alert />\r\n        <Switch>\r\n          <Route exact path='/' component={HomePage} />\r\n          <Route exact path='/signin_up' component={Signin_up} />\r\n          {/* <Route exact path='/signin_up' component={Signin} />\r\n          <Route exact path='/signup_up' component={Signup} /> */}\r\n        </Switch>\r\n      </HashRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}