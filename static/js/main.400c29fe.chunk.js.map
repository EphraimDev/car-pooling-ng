{"version":3,"sources":["reducers/auth.js","reducers/index.js","actions/types.js","store/index.js","components/HomePage/HomePage.js","domain/index.js","containers/Signin/Signin.js","actions/auth.js","containers/Signup/Signup.js","components/Signin_up/Signin_up.js","App.js","serviceWorker.js","index.js"],"names":["initialState","token","isAuthenticated","loading","user","rootReducer","combineReducers","auth","state","action","type","payload","localStorage","setItem","removeItem","store","createStore","composeWithDevTools","applyMiddleware","thunk","HomePage","domain","connect","login","email","password","history","dispatch","a","data","JSON","stringify","config","headers","axios","post","res","useState","formData","setFormData","onChange","e","target","name","value","onSubmit","preventDefault","className","placeholder","register","first_name","last_name","id","Signin_up","view","setView","to","onClick","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.400c29fe.chunk.js","sourcesContent":["import {\r\n  REGISTER_FAIL,\r\n  REGISTER_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  token: null,\r\n  isAuthenticated: null,\r\n  loading: true,\r\n  user: null\r\n};\r\nexport default function(state = initialState, action) {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case REGISTER_SUCCESS:\r\n    case LOGIN_SUCCESS:\r\n      localStorage.setItem('token', payload);\r\n      return {\r\n        ...state,\r\n        token: payload,\r\n        isAuthenticated: true,\r\n        loading: false\r\n      };\r\n    case REGISTER_FAIL:\r\n    case LOGIN_FAIL:\r\n      localStorage.removeItem('token');\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        isAuthenticated: false,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport auth from './auth'\r\nconst rootReducer=combineReducers({auth})\r\n\r\nexport default rootReducer;\r\n","export const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL='LOGIN_FAIL'\r\nexport const REGISTER_FAIL='REGISTER_FAIL'","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\n\r\nconst HomePage = () => {\r\n  return <div>HomePage</div>;\r\n};\r\n\r\nexport default HomePage;\r\n","export const domain = 'https://car-pooling-ng.herokuapp.com/api/v1';","import React, { useState } from 'react';\r\n// import {Link} from 'react-router-dom';\r\nimport { login } from '../../actions/auth';\r\nimport { connect } from 'react-redux';\r\nconst Signin = ({ login, history }) => {\r\n  const [formData, setFormData] = useState({ email: '', password: '' });\r\n  const { email, password } = formData;\r\n  const onChange = e => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n  const onFormSubmit = e => {\r\n    e.preventDefault();\r\n    login(email, password, history);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onFormSubmit}>\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          value={email}\r\n          className='form-control no-border mt-3'\r\n          type='text'\r\n          name='email'\r\n          placeholder='Email'\r\n        />\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          value={password}\r\n          className='form-control no-border mt-3'\r\n          type='password'\r\n          name='password'\r\n          placeholder='Password'\r\n        />\r\n        <input className='btn btn-primary mt-3' type='submit' name='submit' />\r\n      </form>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { login }\r\n)(Signin);\r\n","import {\r\n  REGISTER_FAIL,\r\n  REGISTER_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS\r\n} from './types';\r\nimport axios from 'axios';\r\nimport { domain } from '../domain';\r\nexport const register = (\r\n  first_name,\r\n  last_name,\r\n  email,\r\n  password,\r\n  history\r\n) => async dispatch => {\r\n  try {\r\n    const data = JSON.stringify({\r\n      first_name,\r\n      last_name,\r\n      email,\r\n      password\r\n    });\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const res = await axios.post(domain + '/auth/signup', data, config);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data.data.token\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n      payload: error\r\n    });\r\n  }\r\n};\r\nexport const login = (email, password, history) => async dispatch => {\r\n  try {\r\n    const data = JSON.stringify({\r\n      email,\r\n      password\r\n    });\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const res = await axios.post(domain + '/auth/signin', data, config);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data.data.token\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: error\r\n    });\r\n  }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { register } from '../../actions/auth';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Signup = ({ register, history }) => {\r\n  const [formData, setFormData] = useState({\r\n    first_name: '',\r\n    last_name: '',\r\n    email: '',\r\n    password: ''\r\n  });\r\n  const { first_name, last_name, email, password } = formData;\r\n  const onChange = e => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n  const onFormSubmit = e => {\r\n      e.preventDefault();\r\n      register(first_name, last_name, email, password, history);\r\n  };\r\n  return (\r\n    <div className='container'>\r\n      {' '}\r\n      <form onSubmit={onFormSubmit}>\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          className='form-control no-border mt-3'\r\n          type='text'\r\n          name='first_name'\r\n          value={first_name}\r\n          placeholder='First Name'\r\n        />\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          className='form-control no-border mt-3'\r\n          type='text'\r\n          name='last_name'\r\n          value={last_name}\r\n          placeholder='Last Name'\r\n        />\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          className='form-control no-border mt-3'\r\n          type='text'\r\n          name='email'\r\n          value={email}\r\n          placeholder='Email'\r\n        />\r\n        <input\r\n          onChange={e => onChange(e)}\r\n          className='form-control no-border mt-3'\r\n          type='password'\r\n          name='password'\r\n          value={password}\r\n          placeholder='Password'\r\n        />\r\n        <input\r\n          className='btn btn-primary mt-3'\r\n          type='submit'\r\n          name='submit'\r\n          id=''\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  { register }\r\n)(Signup);\r\n","import React, { useState, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Signin from '../../containers/Signin/Signin';\r\nimport Signup from '../../containers/Signup/Signup';\r\n\r\nconst Signin_up = () => {\r\n  const [view, setView] = useState('signin');\r\n  return (\r\n    <section>\r\n      <div id='cnt' className='row'>\r\n        <div id='img' className='col' />\r\n        <div id='signin' className='col '>\r\n          <Link to='/'>Go back</Link>\r\n          <div className='row mt-5'>\r\n            <div className='col'>\r\n              <button\r\n                className='buttn btn btn-lg'\r\n                onClick={() => {\r\n                  setView('signin');\r\n                }}>\r\n                Signin\r\n              </button>\r\n            </div>\r\n\r\n            <div className='col'>\r\n              <button\r\n                className='buttn btn btn-lg'\r\n                onClick={() => {\r\n                  setView('signup');\r\n                }}>\r\n                Signup\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=''>\r\n            {' '}\r\n            {view === 'signin' ? (\r\n              <Fragment>\r\n                <Signin />\r\n                <br />\r\n                <p>\r\n                  Don't have an account? <Link to='#'>Register</Link>\r\n                </p>\r\n              </Fragment>\r\n            ) : (\r\n              <Fragment>\r\n                <Signup />\r\n                <br />\r\n                <p>\r\n                  Already have an account? <Link to='#'>Sign In</Link>\r\n                </p>\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Signin_up;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport store from './store';\r\n// import Signin from './containers/Signin/Signin';\r\n// import Signup from './containers/Signup/Signup';\r\nimport HomePage from './components/HomePage/HomePage';\r\nimport Signin_up from './components/Signin_up/Signin_up';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <BrowserRouter basename='/car-pooling-ng'>\r\n        <Switch>\r\n          <Route exact path='/' component={HomePage} />\r\n          <Route exact path='/signin_up' component={Signin_up} />\r\n          {/* <Route exact path='/signin_up' component={Signin} />\r\n          <Route exact path='/signup_up' component={Signup} /> */}\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}